{"version":3,"sources":["PO.js","DO.js","ExcelPO.js","App.js","serviceWorker.js","index.js"],"names":["PO","fileBase64","setFileBase64","React","useState","viewItem","setViewItem","modalItem","setModalItem","page","setPage","currentPage","setCurrentPage","modalPdf","setModalPdf","items","setItems","vendor","setVendor","vendorConfig","webe","poNumber","poDate","poSite","poContract","ericssondigi","ericssondnb","fileInput","createRef","exportCSV","content","totalItems","flatMap","item","map","lineItem","Object","values","length","wb","Excel","Workbook","ws","addWorksheet","addRow","keys","console","log","forEach","column","index","match","getColumn","num","ret","a","b","String","fromCharCode","parseInt","toColumnName","numFmt","row","moment","toDate","addRows","xlsx","writeBuffer","then","buffer","blob","Blob","type","elem","window","document","createElement","href","URL","createObjectURL","download","click","handleFileChange","async","promise","Array","from","files","file","Promise","resolve","reader","FileReader","onload","_","pdfText","pdf2text","btoa","result","groups","ponumber","podate","format","matchItems","matchAll","poitem","posite","contractno","data","filename","name","readAsBinaryString","all","pdfWidth","innerWidth","Fragment","Form","style","marginBottom","Select","label","options","key","value","text","onChange","e","_ref","className","onDragOver","evt","stopPropagation","preventDefault","dataTransfer","dropEffect","onDrop","display","height","verticalAlign","padding","Button","onClick","current","ref","target","accept","multiple","variant","Table","size","hover","itemIndex","ButtonGroup","Modal","centered","scrollable","show","onHide","dialogClassName","Header","closeButton","Title","Body","PDFReader","atob","onDocumentComplete","width","Footer","disabled","field","fieldid","itemid","DO","loadingTask","pdfjsLib","getDocument","numberOfPage","pdfDocument","numPages","final","i","getPage","getTextContent","textItems","textContent","finalString","str","doDate","doNumber","dodate","donumber","ExcelPO","props","useRef","_ref5","_PO_Detail$Date","XLSX","read","Sheets","SheetNames","json","utils","sheet_to_json","PO_Detail","itemHeader","nextFill","nextItem","lineItems","entries","col","colvalue","every","_ref2","includes","poline","reduce","obj","_ref3","itemline","_ref4","push","assign","Date","results","_item$field","App","Router","basename","Navbar","bg","Brand","Nav","Link","as","NavLink","to","activeStyle","color","Switch","Route","path","Redirect","pathname","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab4c9a29.chunk.js","sourcesContent":["import React from 'react'\n\nimport { PDFReader } from 'reactjs-pdf-reader';\n\n// Bootstrap\nimport { Button , Modal, Table, ButtonGroup} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Semantic\nimport { Form } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n\n// moment.js\nimport * as moment from 'moment';\n\n// Exceljs\nimport Excel from 'exceljs';\n\nfunction PO(){\n\n    let [ fileBase64 , setFileBase64 ] = React.useState(null)\n    let [ viewItem , setViewItem ] = React.useState([])\n    let [ modalItem , setModalItem ] = React.useState(false)\n    let [ page, setPage ] = React.useState(1)\n    let [ currentPage, setCurrentPage ] = React.useState(1)\n    let [ modalPdf , setModalPdf ] = React.useState(false)\n    let [ items , setItems ] = React.useState([])\n    let [ vendor , setVendor ] = React.useState(\"webe\")\n\n    const vendorConfig = {\n        webe:{\n            poNumber : /PO\\s+Number\\s+:\\s*(?<ponumber>\\d+)/, \n            poDate: /PO\\s+Date\\s+:\\s*(?<podate>[\\d]+[\\.|\\-|\\\\][\\d]+[\\.|\\-|\\\\][\\d]+)/, \n            poSite: /SITE ID\\s*.\\s*(?<poSite>\\w+)/i,\n            poContract: /Contract\\s+No\\s+:\\s(?<contractno>\\d+)/ , \n            items: /(?<item>\\d{1,2})\\s(?<materialno>\\d{10})\\s(?<description>.+?)\\s(?<date>\\d{1,2}\\.\\d{1,2}\\.\\d{4})\\s(?<quantity>\\d+|\\d+.\\d+)\\s(?<quantifier>\\w+)\\s(?<unitprice>\\d+\\,?\\d*\\.\\d{2})\\s(?<totalprice>\\d*\\,?\\d+\\.\\d{2})/gm\n        },\n        ericssondigi:{\n            poNumber: /Purchase Order\\s*(?<ponumber>\\d{10})/,\n            poDate: /Date\\s*(?<podate>\\d{2}\\.\\d{2}\\.\\d{4})\\s*\\(DD\\.MM\\.YYYY\\)/,\n            items: /\\s(?<itemno>\\d{5})\\s+(?<description>.{1,50})\\s+(?<quantity>\\d+\\.{0,1}\\d{0,})\\s+(?<unit>\\w+)\\s+(?<unitprice>\\d+(\\,\\d{3}){0,}\\.\\d{2})\\s+(?<linevalue>\\d+(\\,\\d{3}){0,}\\.\\d{2})(.+?)(?<siteid>\\d{4}[a-z|A-Z](\\_\\d){0,1})/gm\n        }, \n        ericssondnb:{\n            poNumber: /Purchase Order\\s*(?<ponumber>\\d{10})/,\n            poDate: /Date\\s*(?<podate>\\d{2}\\.\\d{2}\\.\\d{4})\\s*\\(DD\\.MM\\.YYYY\\)/,\n            items: /\\s(?<itemno>\\d{5})\\s+(?<description>.{1,50})\\s+(?<quantity>\\d+\\.{0,1}\\d{0,})\\s+(?<unit>\\w+)\\s+(?<unitprice>\\d+(\\,\\d{3}){0,}\\.\\d{2})\\s+(?<linevalue>\\d+(\\,\\d{3}){0,}\\.\\d{2})?(?<description2>.+?)(?<siteid>[A-Z|a-z]{5}\\d{4})/gm\n        }\n    }\n\n    let fileInput = React.createRef()\n\n    let toColumnName = (num) => {\n        for (var ret = '', a = 1, b = 26; (num -= a) >= 0; a = b, b *= 26) {\n        ret = String.fromCharCode(parseInt((num % b) / a) + 65) + ret;\n        }\n        return ret;    \n    }\n\n    let exportCSV = () => {\n        let content = []\n        let totalItems = items.flatMap(item => item.items)\n        content = totalItems.map(lineItem => Object.values(lineItem))\n\n        if(content.length > 0){\n        let wb = new Excel.Workbook()\n        let ws = wb.addWorksheet(\"PO\")\n        ws.addRow(Object.keys(totalItems[0]))\n        console.log(Object.keys(totalItems[0]))\n        console.log(content)\n\n        Object.keys(totalItems[0]).forEach((column,index) => {\n            if(column.match(/date/g)){\n                console.log(`Convert column ${index+1} to date format`)\n                ws.getColumn(`${toColumnName(index+1)}`).numFmt = \"d-mmm-yy\"\n                content.forEach(row => {\n                    row[index] = moment.utc(row[index], 'YYYY/MM/DD').toDate()\n                })\n            }\n        })\n        ws.addRows(content)\n\n        \n        //content = [Object.keys(totalItems[0]).join(\",\"), ...content]\n        wb.xlsx.writeBuffer().then((buffer) => {\n            let blob = new Blob([buffer],{type:\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"})\n            let elem = window.document.createElement(\"a\")\n            elem.href = window.URL.createObjectURL(blob)\n            elem.download = 'PO_Export.xlsx'\n            elem.click()\n        })\n        }\n    }\n\n    let handleFileChange = async (files) => {\n        let promise = Array.from(files).map((file)=>{\n            return new Promise((resolve)=>{\n                let reader = new FileReader()\n                reader.onload = (_) => {\n                //setFileBase64(btoa(reader.result))\n                let pdfText = window.pdf2text(btoa(reader.result))\n                console.log(pdfText)\n                let [poNumber , poDate , poSite] = [\"\" , \"\", \"\"]\n\n                \n                if(vendorConfig[vendor]['poNumber'] && pdfText.match(vendorConfig[vendor]['poNumber'])){    \n                    poNumber = pdfText.match(vendorConfig[vendor].poNumber).groups.ponumber\n                }\n\n                if(vendorConfig[vendor]['poDate'] && pdfText.match(vendorConfig[vendor]['poDate'])){\n                    poDate = moment(pdfText.match(vendorConfig[vendor].poDate).groups.podate, \"DD.MM.YYYY\").format(\"YYYY/MM/DD\")\n                }\n\n                if(vendorConfig[vendor]['poSite'] && pdfText.match(vendorConfig[vendor]['poSite'])){\n                    poSite = pdfText.match(vendorConfig[vendor].poSite).groups.poSite\n                }\n\n                //setFileText(pdfText)\n                let matchItems = pdfText.matchAll(vendorConfig[vendor].items)\n                \n                let poitem = Array.from(matchItems).map(item => item.groups).map(item => ({ ...{posite: poSite , ponumber:poNumber, podate:poDate},...item }))\n\n                poitem.forEach(item => {\n                    if('date' in item){\n                        item['date'] = moment(item['date'],\"DD.MM.YYYY\").format(\"YYYY/MM/DD\")\n                    }\n                })\n\n                // external request by emily \n                // apply T prefix to all material number if contract no is \n                if(vendorConfig[vendor]['poContract']){\n                    console.log(pdfText.match(vendorConfig[vendor]['poContract']))\n                    if(pdfText.match(vendorConfig[vendor]['poContract'])){\n                        const contractNo = pdfText.match(vendorConfig[vendor]['poContract']).groups.contractno\n                        if(contractNo === '3400033518'){\n                            poitem.forEach(item => {\n                                if('materialno' in item){\n                                    item['materialno'] = `T${item['materialno']}`\n                                }\n                            })\n                        }\n                    }\n                }\n                \n                resolve({poDate:poDate, poNumber: poNumber, items:poitem?poitem:[], data: btoa(reader.result), filename: file.name})\n                //setItems(Array.from(matchItems).map(item => item.groups))\n                }\n\n                reader.readAsBinaryString(file)\n            })  \n        })\n\n        Promise.all(promise).then((result)=>{\n        setItems(result)\n        console.log(result)\n        })\n        \n    }\n\n    let onDropFile = (evt) => {\n        evt.stopPropagation();\n        evt.preventDefault();\n\n        let files = evt.dataTransfer.files; \n\n        handleFileChange(files)\n    }\n\n    const pdfWidth = window.innerWidth * 0.8\n    return (\n        <>  \n            <Form style={{marginBottom:'10px'}}>\n                <Form.Select label=\"Select PO type\" options={[\n                    {key: 'webe', value: 'webe', text: 'Webe PO'},\n                    {key: 'ericssondigi', value:'ericssondigi', text: 'Ericsson Digi PO'}, \n                    {key: 'ericssondnb' , value:'ericssondnb' , text: 'Ericsson DNB PO'}\n                ]} value={vendor} onChange={(e,{value})=>setVendor(value)}/>\n            </Form>\n            <div className=\"dropFileArea\" onDragOver={(evt)=>{evt.stopPropagation();evt.preventDefault();evt.dataTransfer.dropEffect = 'copy';}} onDrop={onDropFile}>\n                <div style={{display:'flex', height: '40px', verticalAlign:'middle'}}>\n                <div style={{padding:'8px'}}>Drop multiple PO PDF files or</div>\n\n                <Button onClick={()=>{\n                    fileInput.current.click();\n                }}>Select Files</Button>\n\n                <input type=\"file\" ref={fileInput} onChange={(evt)=>{\n                    let files = evt.target.files \n                    if(files.length > 0){\n                    handleFileChange(files)\n                    }\n                }} style={{display:'none'}} accept=\".pdf\" multiple/>\n                </div>\n                \n            </div>\n\n            <div className=\"actionArea\">\n                {items.length > 0 && <Button variant=\"secondary\" onClick={()=>{exportCSV()}}>Export to Excel</Button>}\n            </div>\n                \n            <div className=\"itemsArea\">\n                {items.length > 0 && <Table size=\"sm\" hover={true}>\n                <thead>\n                    <tr>\n                    <td>Filename</td>\n                    <td>PO Number</td>\n                    <td>PO Date</td>\n                    <td>Number of items</td>\n                    <td></td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {items.map((item,itemIndex) => {\n                    return <tr key={itemIndex}>\n                        <td>{item.filename}</td>\n                        <td>{item.poNumber}</td>\n                        <td>{item.poDate}</td>\n                        <td>{item.items.length}</td>\n                        <td>\n                        <ButtonGroup size=\"sm\">\n                            <Button onClick={()=>{\n                            setFileBase64(item.data);\n                            setCurrentPage(1)\n                            setModalPdf(true);\n                            }}>\n                            View PDF\n                            </Button>\n                            <Button onClick={()=>{\n                            setViewItem(item.items)\n                            setModalItem(true)\n                            }}>\n                            View Item\n                            </Button>\n                        </ButtonGroup>\n                        \n                        \n                        </td>\n                    </tr>\n                    })}\n                </tbody>\n                </Table>}\n            </div>\n            \n            \n            {/* Unhide for debug purpose <div>{fileText}</div>*/}\n            <Modal centered scrollable show={modalPdf} onHide={()=>{setModalPdf(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\n                <Modal.Header closeButton>\n                <Modal.Title>PDF Document</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                {fileBase64 !== null && <PDFReader data={atob(fileBase64)} size={0.7} onDocumentComplete={\n                    (page)=>{\n                    setPage(page)\n                    }\n                } page={currentPage} width={pdfWidth}/>}\n                </Modal.Body>\n\n                <Modal.Footer>\n                <div>Page {currentPage} of {page}</div>\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage-1 >= 0) setCurrentPage(currentPage-1)}} disabled={currentPage == 1}>Previous</Button>\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage+1 <= page) setCurrentPage(currentPage+1)}} disabled={currentPage == page}>Next</Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal centered scrollable show={modalItem} onHide={()=>{setModalItem(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\n                <Modal.Header closeButton>\n                <Modal.Title>Items</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                {viewItem.length > 0 && <table className=\"po-output\">\n                    <thead>\n                    <tr>\n                        {Object.keys(viewItem[0]).map((field, fieldid)=>{\n                        return <td key={fieldid}>{`${field}\\t`}</td>\n                        })}\n                    </tr>\n                    </thead>  \n                    <tbody>\n                    {viewItem.map((item, itemid)=>{\n                        return <tr key={`item_${itemid}`}>\n                        {Object.keys(item).map((field, fieldid)=>{\n                            return <td key={`item_${itemid}_${fieldid}`}>{`${item[field]}\\t`}</td>\n                        })}\n                        </tr>\n                    })}\n                    <tr></tr>\n                    </tbody>\n                </table>}\n                </Modal.Body>\n            </Modal>\n        </>\n    )\n    \n}\n\nexport default PO","import React from 'react'\n\nimport { PDFReader } from 'reactjs-pdf-reader';\n\n// Bootstrap\nimport { Button , Modal, Table, ButtonGroup} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// moment.js\nimport * as moment from 'moment';\n\n// Exceljs\nimport Excel from 'exceljs';\n\nfunction DO(){\n\n    let [ fileBase64 , setFileBase64 ] = React.useState(null)\n    let [ viewItem , setViewItem ] = React.useState([])\n    let [ modalItem , setModalItem ] = React.useState(false)\n    let [ page, setPage ] = React.useState(1)\n    let [ currentPage, setCurrentPage ] = React.useState(1)\n    let [ modalPdf , setModalPdf ] = React.useState(false)\n    let [ items , setItems ] = React.useState([])\n    let fileInput = React.createRef()\n\n    let exportCSV = () => {\n        let content = []\n        let totalItems = items.flatMap(item => item.items)\n        content = totalItems.map(lineItem => Object.values(lineItem))\n\n        if(content.length > 0){\n        let wb = new Excel.Workbook()\n        let ws = wb.addWorksheet(\"PO\")\n        ws.addRow(Object.keys(totalItems[0]))\n\n        ws.addRows(content)\n        //content = [Object.keys(totalItems[0]).join(\",\"), ...content]\n        wb.xlsx.writeBuffer().then((buffer) => {\n            let blob = new Blob([buffer],{type:\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"})\n            let elem = window.document.createElement(\"a\")\n            elem.href = window.URL.createObjectURL(blob)\n            elem.download = 'DO_Export.xlsx'\n            elem.click()\n        })\n        }\n    }\n\n    let handleFileChange = async (files) => {\n        let promise = Array.from(files).map((file)=>{\n            return new Promise((resolve)=>{\n                let reader = new FileReader()\n                reader.onload = async (_) => {\n                //setFileBase64(btoa(reader.result))\n\n                    var loadingTask = window.pdfjsLib.getDocument({ data:  reader.result});\n                    var pdfText = await loadingTask.promise.then(async (pdfDocument) => {\n                        const numberOfPage = pdfDocument.numPages\n                        let final = \"\"\n                        for(let i = 1; i <= numberOfPage ; i++){\n                            let pageString = await pdfDocument.getPage(i).then(async (page) => {\n                                return page.getTextContent().then(async (textContent) => {\n                                    var textItems = textContent.items;\n                                    var finalString = \"\";\n    \n                                    // Concatenate the string of the item to the final string\n                                    for (var i = 0; i < textItems.length; i++) {\n                                        var item = textItems[i];\n    \n                                        finalString += item.str + \" \";\n                                    }\n    \n                                    // Solve promise with the text retrieven from the page\n                                    return finalString\n                                });\n                            });\n                            \n                            final += \" \" + pageString\n                        }\n                        return final\n                    });\n\n                    console.log(pdfText)\n\n                    let poNumber = \"\" , doDate = \"\" , doNumber = \"\"\n\n                    if(pdfText.match(/PO\\s+No\\.\\s+:\\s*(?<ponumber>\\d+)/i)){\n                        poNumber = pdfText.match(/PO\\s+No\\.\\s+:\\s*(?<ponumber>\\d+)/i).groups.ponumber\n                    }\n        \n                    if(pdfText.match(/No\\.?\\s+:\\s+(?<donumber>\\w{15})\\s+Date\\s+:\\s*(?<dodate>\\d{1,2}\\-\\w{3}\\-\\d{4})/i)){\n                        doDate = moment(pdfText.match(/No\\.?\\s+:\\s+(?<donumber>\\w{15})\\s+Date\\s+:\\s*(?<dodate>\\d{1,2}\\-\\w{3}\\-\\d{4})/i).groups.dodate, \"DD-MMM-YYYY\").format(\"YYYY/MM/DD\")\n                        doNumber = pdfText.match(/No\\.?\\s+:\\s+(?<donumber>\\w{15})\\s+Date\\s+:\\s*(?<dodate>\\d{1,2}\\-\\w{3}\\-\\d{4})/i).groups.donumber\n                    }\n        \n                    let matchItems = pdfText.matchAll(/(?<noitem>\\d{1,2})\\s+(?<quantity>\\d+|\\d+.\\d+)\\s+(?<materialno>\\d{10})\\s+(?<sitecode>\\w{6})\\s+(?<UOM>\\w+)\\s+(?<description>.+?((?=(\\s+(\\d{1,2})\\s+(\\d+|\\d+.\\d+)))|(?=\\s+OCK Setia)|(?=\\s+RECEIVED)))/gmi)\n            \n                    let poitem = Array.from(matchItems).map(item => item.groups).map(item => ({ ...{ponumber:poNumber, dodate:doDate, donumber:doNumber},...item }))\n\n                    /*poitem.forEach(item => {\n                        item['date'] = moment(item['date'],\"DD.MM.YYYY\").format(\"YYYY/MM/DD\")\n                    })*/\n                    \n                    //console.log({doDate:doDate, doNumber:doNumber, poNumber: poNumber, items:poitem?poitem:[], data: btoa(reader.result), filename: file.name})\n                    resolve({doDate:doDate, doNumber:doNumber, poNumber: poNumber, items:poitem?poitem:[], data: btoa(reader.result), filename: file.name})\n                }\n                \n\n                reader.readAsBinaryString(file)\n            })  \n        })\n\n        Promise.all(promise).then((result)=>{\n            setItems(result)\n            console.log(result)\n        })\n    }\n\n    let onDropFile = (evt) => {\n        evt.stopPropagation();\n        evt.preventDefault();\n\n        let files = evt.dataTransfer.files; \n\n        handleFileChange(files)\n    }\n\n    const pdfWidth = window.innerWidth * 0.8\n    return (\n        <>\n            <div className=\"dropFileArea\" onDragOver={(evt)=>{evt.stopPropagation();evt.preventDefault();evt.dataTransfer.dropEffect = 'copy';}} onDrop={onDropFile}>\n                <div style={{display:'flex', height: '40px', verticalAlign:'middle'}}>\n                <div style={{padding:'8px'}}>Drop multiple DO PDF files or</div>\n\n                <Button onClick={()=>{\n                    fileInput.current.click();\n                }}>Select Files</Button>\n\n                <input type=\"file\" ref={fileInput} onChange={(evt)=>{\n                    let files = evt.target.files \n                    if(files.length > 0){\n                    handleFileChange(files)\n                    }\n                }} style={{display:'none'}} accept=\".pdf\" multiple/>\n                </div>\n                \n            </div>\n\n            <div className=\"actionArea\">\n                {items.length > 0 && <Button variant=\"secondary\" onClick={()=>{exportCSV()}}>Export to Excel</Button>}\n            </div>\n                \n            <div className=\"itemsArea\">\n                {items.length > 0 && <Table size=\"sm\" hover={true}>\n                <thead>\n                    <tr>\n                    <td>Filename</td>\n                    <td>DO Number</td>\n                    <td>DO Date</td>\n                    <td>PO Number</td>\n                    <td>Number of items</td>\n                    <td></td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {items.map((item,itemIndex) => {\n                    return <tr key={itemIndex}>\n                        <td>{item.filename}</td>\n                        <td>{item.doNumber}</td>\n                        <td>{item.doDate}</td>\n                        <td>{item.poNumber}</td>\n                        <td>{item.items.length}</td>\n                        <td>\n                        <ButtonGroup size=\"sm\">\n                            <Button onClick={()=>{\n                            setFileBase64(item.data);\n                            setCurrentPage(1)\n                            setModalPdf(true);\n                            }}>\n                            View PDF\n                            </Button>\n                            <Button onClick={()=>{\n                            setViewItem(item.items)\n                            setModalItem(true)\n                            }}>\n                            View Item\n                            </Button>\n                        </ButtonGroup>\n                        \n                        \n                        </td>\n                    </tr>\n                    })}\n                </tbody>\n                </Table>}\n            </div>\n            \n            \n            {/* Unhide for debug purpose <div>{fileText}</div>*/}\n            <Modal centered scrollable show={modalPdf} onHide={()=>{setModalPdf(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\n                <Modal.Header closeButton>\n                <Modal.Title>PDF Document</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                {fileBase64 !== null && <PDFReader data={atob(fileBase64)} size={0.7} onDocumentComplete={\n                    (page)=>{\n                    setPage(page)\n                    }\n                } page={currentPage} width={pdfWidth}/>}\n                </Modal.Body>\n\n                <Modal.Footer>\n                <div>Page {currentPage} of {page}</div>\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage-1 >= 0) setCurrentPage(currentPage-1)}} disabled={currentPage == 1}>Previous</Button>\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage+1 <= page) setCurrentPage(currentPage+1)}} disabled={currentPage == page}>Next</Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Modal centered scrollable show={modalItem} onHide={()=>{setModalItem(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\n                <Modal.Header closeButton>\n                <Modal.Title>Items</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                {viewItem.length > 0 && <table className=\"po-output\">\n                    <thead>\n                    <tr>\n                        {Object.keys(viewItem[0]).map((field, fieldid)=>{\n                        return <td key={fieldid}>{`${field}\\t`}</td>\n                        })}\n                    </tr>\n                    </thead>  \n                    <tbody>\n                    {viewItem.map((item, itemid)=>{\n                        return <tr key={`item_${itemid}`}>\n                        {Object.keys(item).map((field, fieldid)=>{\n                            return <td key={`item_${itemid}_${fieldid}`}>{`${item[field]}\\t`}</td>\n                        })}\n                        </tr>\n                    })}\n                    <tr></tr>\n                    </tbody>\n                </table>}\n                </Modal.Body>\n            </Modal>\n        </>\n    )\n    \n}\n\nexport default DO","import React from 'react';\nimport XLSX from 'xlsx';\n\n// Bootstrap\nimport { Button , Modal, Table, ButtonGroup} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Semantic\nimport { Form } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n\n// moment.js\nimport * as moment from 'moment';\n\n// Exceljs\nimport Excel from 'exceljs';\n\nfunction ExcelPO(props){\n    const fileInput = React.useRef(null)\n    const [ items , setItems] = React.useState([])\n    let [ viewItem , setViewItem ] = React.useState([])\n    let [ modalItem , setModalItem ] = React.useState(false)\n\n    let toColumnName = (num) => {\n        for (var ret = '', a = 1, b = 26; (num -= a) >= 0; a = b, b *= 26) {\n        ret = String.fromCharCode(parseInt((num % b) / a) + 65) + ret;\n        }\n        return ret;    \n    }\n\n    const onDropFile  = (evt) => {\n        evt.stopPropagation();\n        evt.preventDefault();\n\n        let files = evt.dataTransfer.files;\n\n        handleFileChange(files)\n    }\n\n    let handleFileChange = async (files) => {\n        let promise =  Array.from(files).map(file => {\n            return new Promise((resolve) => {\n                let reader = new FileReader()\n                reader.onload = (evt) => {\n                    const data = evt.target.result\n                    let wb = XLSX.read(data, {type: 'binary'})\n                    let ws = wb.Sheets[wb.SheetNames[0]] \n                    let json = XLSX.utils.sheet_to_json(ws)\n                    console.log(json)\n                    const PO_Detail =  {\n                        // 'Purchase Contract': '', \n                        // 'Issue No.': '', \n                        // 'Project No.': '',\n                        // 'Contract No.': '',\n                        // 'Project Name': '',\n                        // 'Project No.': '', \n                        'PO No.': '', \n                        'Submission Date': '', \n                    }\n\n                    //const itemHeader = [\"Line\", \"Project Area\", \"Site ID \", \"Site Name\", \"Item Num\", \"Description\", \"Remark\", \"Unit\", \"Qty\", \"Unit Price\", \"Amount\"]\n                    const itemHeader = ['Line','Project Area','Site ID','Site Name','Item Num','Description','Remark','Unit','Qty','Unit Price','Amount' ]\n                    let nextFill = null\n                    let nextItem = null\n                    let lineItems = []\n                    json.forEach((row) => {\n                        Object.entries(row).forEach(([col, colvalue]) => {\n                            if(colvalue in PO_Detail){\n                                if(PO_Detail[colvalue] === '') nextFill = colvalue \n                            }else if(nextFill !== null){\n                                PO_Detail[nextFill] = colvalue \n                                nextFill  = null\n                            }\n                        })\n\n                        let isAllExist = Object.entries(row).every(([col, colvalue]) => itemHeader.includes(colvalue))\n                        if(isAllExist){\n                            nextItem = row\n                        }else if(nextItem !== null){\n                            if(Object.values(row).length < 5){\n                                nextItem = null\n                            }else{\n\n                                // add PO_Detail to line item\n                                let poline = Object.entries(PO_Detail).reduce((obj , [col,colvalue]) => {\n                                    obj[col] = colvalue\n                                    return obj\n                                }, {})\n                                let itemline = Object.entries(nextItem).reduce((obj , [col,colvalue]) => {\n                                    if(col in row) {\n                                        obj[colvalue] = row[col]\n                                    }else{\n                                        obj[colvalue] = \"\"\n                                    }\n                                    return obj\n                                }, {})\n                                lineItems.push(Object.assign({}, poline, itemline))\n                            }\n                        }\n                    })\n                    \n                    // lineItems.forEach(item => {\n                    //     Object.entries(PO_Detail).forEach(([field, value]) =>{\n                    //         item[field] = value\n                    //     })\n                    // })\n\n\n                    let item =  {poDate: (PO_Detail.Date ?? PO_Detail['Submission Date'] ?? \"\"), poNumber: PO_Detail['Purchase Contract'], items:lineItems?lineItems:[], filename: file.name}\n                    resolve(item)\n                    //console.log(text.replace(/(?<w1>\\b)\\s(?<w2>\\b)/g, \"$1$2\"))\n                }\n                reader.readAsBinaryString(file)\n            })\n        })\n\n        Promise.all(promise).then((results) => {\n            setItems(results)\n        })\n        \n    }\n\n    let exportCSV = () => {\n        let content = []\n        let totalItems = items.flatMap(item => item.items) // list of dictionary\n        content = totalItems.map(lineItem => Object.values(lineItem))\n\n        if(content.length > 0){\n        let wb = new Excel.Workbook()\n        let ws = wb.addWorksheet(\"PO\")\n        ws.addRow(Object.keys(totalItems[0]))\n\n        Object.keys(totalItems[0]).forEach((column,index) => {\n            if(column.match(/date/gi)){\n                console.log(`Convert column ${index+1} to date format`)\n                ws.getColumn(`${toColumnName(index+1)}`).numFmt = \"d-mmm-yy\"\n                content.forEach(row => {\n                    row[index] = moment.utc(row[index], 'YYYY/MM/DD').toDate()\n                })\n            }\n        })\n        ws.addRows(content)\n\n        \n        //content = [Object.keys(totalItems[0]).join(\",\"), ...content]\n        wb.xlsx.writeBuffer().then((buffer) => {\n            let blob = new Blob([buffer],{type:\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"})\n            let elem = window.document.createElement(\"a\")\n            elem.href = window.URL.createObjectURL(blob)\n            elem.download = 'PO_Export.xlsx'\n            elem.click()\n        })\n        }\n    }\n\n    return <>\n        <div className=\"dropFileArea\" onDragOver={(evt)=>{evt.stopPropagation();evt.preventDefault();evt.dataTransfer.dropEffect = 'copy';}} onDrop={onDropFile}>\n            <div style={{display:'flex', height: '40px', verticalAlign:'middle'}}>\n            <div style={{padding:'8px'}}>Drop multiple PO Excels files or</div>\n\n            <Button onClick={()=>{\n                fileInput.current.click();\n            }}>Select Files</Button>\n\n            <input type=\"file\" ref={fileInput} onChange={(evt)=>{\n                let files = evt.target.files \n                if(files.length > 0){\n                    handleFileChange(files)\n                }\n            }} style={{display:'none'}} accept=\".xlsx, .xls\" multiple/>\n            </div>\n            \n            \n        </div>\n        <div className=\"actionArea\">\n            {items.length > 0 && <Button variant=\"secondary\" onClick={()=>{exportCSV()}}>Export to Excel</Button>}\n        </div>\n\n        <div className=\"itemsArea\">\n            {items.length > 0 && <Table size=\"sm\" hover={true}>\n            <thead>\n                <tr>\n                <td>Filename</td>\n                <td>PO Number</td>\n                <td>PO Date</td>\n                <td>Number of items</td>\n                <td></td>\n                </tr>\n            </thead>\n            <tbody>\n                {items.map((item,itemIndex) => {\n                return <tr key={itemIndex}>\n                    <td>{item.filename}</td>\n                    <td>{item.poNumber}</td>\n                    <td>{item.poDate}</td>\n                    <td>{item.items.length}</td>\n                    <td>\n                    <ButtonGroup size=\"sm\">\n                        <Button onClick={()=>{\n                            setViewItem(item.items)\n                            setModalItem(true)\n                        }}>\n                        View Item\n                        </Button>\n                    </ButtonGroup>\n                    \n                    \n                    </td>\n                </tr>\n                })}\n            </tbody>\n            </Table>}\n        </div>\n        <Modal centered scrollable show={modalItem} onHide={()=>{setModalItem(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\n            <Modal.Header closeButton>\n            <Modal.Title>Items</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n            {viewItem.length > 0 && <table className=\"po-output\">\n                <thead>\n                <tr>\n                    {Object.keys(viewItem[0]).map((field, fieldid)=>{\n                    return <td key={fieldid}>{`${field}\\t`}</td>\n                    })}\n                </tr>\n                </thead>  \n                <tbody>\n                {viewItem.map((item, itemid)=>{\n                    return <tr key={`item_${itemid}`}>\n                    {Object.keys(item).map((field, fieldid)=>{\n                        return <td key={`item_${itemid}_${fieldid}`}>{`${item[field] ?? \"\"}\\t`}</td>\n                    })}\n                    </tr>\n                })}\n                <tr></tr>\n                </tbody>\n            </table>}\n            </Modal.Body>\n        </Modal>\n    </>\n}\n\nexport default ExcelPO","import React from 'react';\nimport './App.css';\nimport PO from './PO';\nimport DO from './DO';\nimport ExcelPO from './ExcelPO';\n\n// Bootstrap\nimport { Navbar , Nav} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// React Router\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  NavLink\n} from \"react-router-dom\"\n\nfunction App(props) {\n\n  return (\n    <Router basename=\"poer\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>PDF Extract</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link as={NavLink} to=\"po\" activeStyle={{color:'white'}}>Purchase Order (PDF)</Nav.Link>\n          <Nav.Link as={NavLink} to=\"do\" activeStyle={{color:'white'}}>Delivery Order</Nav.Link>\n          <Nav.Link as={NavLink} to=\"excelpo\" activeStyle={{color:'white'}}>Purchase Order (Excel)</Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/po\">\n            <PO />\n          </Route>\n          <Route path=\"/do\">\n            <DO />\n          </Route>\n          <Route path=\"/excelpo\">\n            <ExcelPO />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to={{pathname:\"po\"}} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  console.log(process.env.NODE_ENV)\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}