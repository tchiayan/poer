{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","fileBase64","setFileBase64","setFileText","page","setPage","currentPage","setCurrentPage","modalPdf","setModalPdf","items","setItems","poNumber","setPoNumber","poDate","setPoDate","fileInput","createRef","handleFileChange","files","reader","FileReader","onload","_","btoa","result","pdfText","window","pdf2text","match","groups","ponumber","podate","matchItems","matchAll","Array","from","map","item","readAsBinaryString","pdfWidth","innerWidth","console","log","className","onDragOver","evt","stopPropagation","preventDefault","dataTransfer","dropEffect","onDrop","style","display","height","verticalAlign","padding","Button","onClick","current","click","type","ref","onChange","target","length","accept","Object","keys","field","fieldid","key","itemid","variant","Modal","centered","scrollable","show","onHide","dialogClassName","size","Header","closeButton","Title","Body","data","atob","onDocumentComplete","width","Footer","disabled","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","process","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2e7ad509.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { PDFReader } from 'reactjs-pdf-reader';\n\n// Bootstrap\nimport { Button , Modal} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n \nfunction App() {\n  let [ fileBase64 , setFileBase64 ] = React.useState(null)\n  let [ fileText , setFileText ] = React.useState(null)\n  let [ page, setPage ] = React.useState(1)\n  let [ currentPage, setCurrentPage ] = React.useState(1)\n  let [ modalPdf , setModalPdf ] = React.useState(false)\n  let [ items , setItems ] = React.useState([])\n  let [ poNumber , setPoNumber ] = React.useState(\"\")\n  let [ poDate, setPoDate ] = React.useState(\"\")\n  let fileInput = React.createRef()\n\n  let handleFileChange = (files) => {\n    let reader = new FileReader()\n    reader.onload = (_) => {\n      setFileBase64(btoa(reader.result))\n      let pdfText = window.pdf2text(btoa(reader.result))\n\n      if(pdfText.match(/PO\\s+Number\\s+:\\s*(?<ponumber>\\d+)/)){\n        setPoNumber(pdfText.match(/PO\\s+Number\\s+:\\s*(?<ponumber>\\d+)/).groups.ponumber)\n      }else{\n        setPoNumber(\"\")\n      }\n\n      if(pdfText.match(/PO\\s+Date\\s+:\\s*(?<podate>[\\d]+[\\.|\\-|\\\\][\\d]+[\\.|\\-|\\\\][\\d]+)/)){\n        setPoDate(pdfText.match(/PO\\s+Date\\s+:\\s*(?<podate>[\\d]+[\\.|\\-|\\\\][\\d]+[\\.|\\-|\\\\][\\d]+)/).groups.podate)\n      }else{\n        setPoDate(\"\")\n      }\n\n      setFileText(pdfText)\n      let matchItems = pdfText.matchAll(/(?<item>\\d{1,2})\\s(?<materialno>\\d{10})\\s(?<description>[\\w\\-\\s\\&\\.\\']+)\\s(?<date>\\d{1,2}\\.\\d{1,2}\\.\\d{4})\\s(?<quantity>\\d+|\\d+.\\d+)\\s(?<quantifier>\\w+)\\s(?<unitprice>\\d+\\,?\\d*\\.\\d{2})\\s(?<totalprice>\\d+\\,?\\d+\\.\\d{2})/gm)\n      setItems(Array.from(matchItems).map(item => item.groups))\n    }\n\n    reader.readAsBinaryString(files[0])\n  }\n\n  let onDropFile = (evt) => {\n    evt.stopPropagation();\n    evt.preventDefault();\n\n    let files = evt.dataTransfer.files; \n\n    handleFileChange(files)\n  }\n\n  const pdfWidth = window.innerWidth * 0.8\n  console.log(pdfWidth)\n\n  return (\n    <div className=\"App\">\n      <div className=\"dropFileArea\" onDragOver={(evt)=>{evt.stopPropagation();evt.preventDefault();evt.dataTransfer.dropEffect = 'copy';}} onDrop={onDropFile}>\n        <div style={{display:'flex', height: '40px', verticalAlign:'middle'}}>\n          <div style={{padding:'8px'}}>Drop file or</div>\n\n          <Button onClick={()=>{\n              fileInput.current.click();\n          }}>Select File</Button>\n\n          <input type=\"file\" ref={fileInput} onChange={(evt)=>{\n            let files = evt.target.files \n            if(files.length > 0){\n              handleFileChange(files)\n            }\n          }} style={{display:'none'}} accept=\".pdf\"/>\n        </div>\n        \n      </div>\n      \n      {items.length > 0 && \n        <>\n          <table className=\"po-output\">\n            <thead>\n              <tr>\n                <td>PO Number</td>\n                <td>PO Date</td>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>\n                  {poNumber}\n                </td>\n                <td>\n                  {poDate}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <table className=\"po-output\">\n            <thead>\n              <tr>\n                {Object.keys(items[0]).map((field, fieldid)=>{\n                  return <td key={fieldid}>{`${field}\\t`}</td>\n                })}\n              </tr>\n            </thead>  \n            <tbody>\n              {items.map((item, itemid)=>{\n                return <tr key={`item_${itemid}`}>\n                  {Object.keys(item).map((field, fieldid)=>{\n                    return <td key={`item_${itemid}_${fieldid}`}>{`${item[field]}\\t`}</td>\n                  })}\n                </tr>\n              })}\n              <tr></tr>\n            </tbody>\n          </table>\n        </>\n      }\n      {/*fileBase64 !== null && <PDFReader data={atob(fileBase64)} width={700}/>*/}\n      {fileBase64 !== null && <Button variant=\"secondary\" onClick={()=>{setModalPdf(true)}} >View PDF</Button>}\n      \n      {/* Unhide for debug purpose <div>{fileText}</div>*/}\n      <Modal centered scrollable show={modalPdf} onHide={()=>{setModalPdf(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\n        <Modal.Header closeButton>\n          <Modal.Title>PDF Document</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          {fileBase64 !== null && <PDFReader data={atob(fileBase64)} size={0.7} onDocumentComplete={\n            (page)=>{\n              setPage(page)\n            }\n          } page={currentPage} width={pdfWidth}/>}\n        </Modal.Body>\n\n        <Modal.Footer>\n          <div>Page {currentPage} of {page}</div>\n          <Button variant=\"secondary\" onClick={()=>{if(currentPage-1 >= 0) setCurrentPage(currentPage-1)}} disabled={currentPage == 1}>Previous</Button>\n          <Button variant=\"secondary\" onClick={()=>{if(currentPage+1 <= page) setCurrentPage(currentPage+1)}} disabled={currentPage == page}>Next</Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  console.log(process.env.NODE_ENV)\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}