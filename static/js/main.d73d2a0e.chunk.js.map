{"version":3,"sources":["PO.js","DO.js","App.js","serviceWorker.js","index.js"],"names":["PO","React","useState","fileBase64","setFileBase64","viewItem","setViewItem","modalItem","setModalItem","page","setPage","currentPage","setCurrentPage","modalPdf","setModalPdf","items","setItems","fileInput","createRef","handleFileChange","files","a","async","promise","Array","from","map","file","Promise","resolve","reader","FileReader","onload","_","pdfText","window","pdf2text","btoa","result","poNumber","poDate","match","groups","ponumber","moment","podate","format","matchItems","matchAll","poitem","item","forEach","data","filename","name","readAsBinaryString","all","then","console","log","pdfWidth","innerWidth","className","onDragOver","evt","stopPropagation","preventDefault","dataTransfer","dropEffect","onDrop","style","display","height","verticalAlign","padding","Button","onClick","current","click","type","ref","onChange","target","length","accept","multiple","variant","content","totalItems","flatMap","lineItem","Object","values","wb","Excel","Workbook","ws","addWorksheet","addRow","keys","addRows","xlsx","writeBuffer","buffer","blob","Blob","elem","document","createElement","href","URL","createObjectURL","download","exportCSV","Table","size","hover","itemIndex","key","ButtonGroup","Modal","centered","scrollable","show","onHide","dialogClassName","Header","closeButton","Title","Body","atob","onDocumentComplete","width","Footer","disabled","field","fieldid","itemid","DO","loadingTask","pdfjsLib","getDocument","pdfDocument","numberOfPage","numPages","final","i","getPage","getTextContent","textContent","textItems","finalString","str","pageString","doDate","doNumber","dodate","donumber","App","props","basename","Navbar","bg","Brand","Nav","Link","as","NavLink","to","activeStyle","color","path","pathname","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d73d2a0e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { PDFReader } from 'reactjs-pdf-reader';\r\n\r\n// Bootstrap\r\nimport { Button , Modal, Table, ButtonGroup} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// moment.js\r\nimport * as moment from 'moment';\r\n\r\n// Exceljs\r\nimport Excel from 'exceljs';\r\n\r\nfunction PO(){\r\n\r\n    let [ fileBase64 , setFileBase64 ] = React.useState(null)\r\n    let [ viewItem , setViewItem ] = React.useState([])\r\n    let [ modalItem , setModalItem ] = React.useState(false)\r\n    let [ page, setPage ] = React.useState(1)\r\n    let [ currentPage, setCurrentPage ] = React.useState(1)\r\n    let [ modalPdf , setModalPdf ] = React.useState(false)\r\n    let [ items , setItems ] = React.useState([])\r\n    let fileInput = React.createRef()\r\n\r\n    let exportCSV = () => {\r\n        let content = []\r\n        let totalItems = items.flatMap(item => item.items)\r\n        content = totalItems.map(lineItem => Object.values(lineItem))\r\n\r\n        if(content.length > 0){\r\n        let wb = new Excel.Workbook()\r\n        let ws = wb.addWorksheet(\"PO\")\r\n        ws.addRow(Object.keys(totalItems[0]))\r\n\r\n        ws.addRows(content)\r\n        //content = [Object.keys(totalItems[0]).join(\",\"), ...content]\r\n        wb.xlsx.writeBuffer().then((buffer) => {\r\n            let blob = new Blob([buffer],{type:\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"})\r\n            let elem = window.document.createElement(\"a\")\r\n            elem.href = window.URL.createObjectURL(blob)\r\n            elem.download = 'PO_Export.xlsx'\r\n            elem.click()\r\n        })\r\n        }\r\n    }\r\n\r\n    let handleFileChange = async (files) => {\r\n        let promise = Array.from(files).map((file)=>{\r\n        return new Promise((resolve)=>{\r\n            let reader = new FileReader()\r\n            reader.onload = (_) => {\r\n            //setFileBase64(btoa(reader.result))\r\n            let pdfText = window.pdf2text(btoa(reader.result))\r\n            //console.log(pdfText)\r\n            let [poNumber , poDate] = [\"\" , \"\"]\r\n\r\n            if(pdfText.match(/PO\\s+Number\\s+:\\s*(?<ponumber>\\d+)/)){\r\n                poNumber = pdfText.match(/PO\\s+Number\\s+:\\s*(?<ponumber>\\d+)/).groups.ponumber\r\n            }\r\n\r\n            if(pdfText.match(/PO\\s+Date\\s+:\\s*(?<podate>[\\d]+[\\.|\\-|\\\\][\\d]+[\\.|\\-|\\\\][\\d]+)/)){\r\n                poDate = moment(pdfText.match(/PO\\s+Date\\s+:\\s*(?<podate>[\\d]+[\\.|\\-|\\\\][\\d]+[\\.|\\-|\\\\][\\d]+)/).groups.podate, \"DD.MM.YYYY\").format(\"YYYY/MM/DD\")\r\n            }\r\n\r\n            //setFileText(pdfText)\r\n            let matchItems = pdfText.matchAll(/(?<item>\\d{1,2})\\s(?<materialno>\\d{10})\\s(?<description>.+?)\\s(?<date>\\d{1,2}\\.\\d{1,2}\\.\\d{4})\\s(?<quantity>\\d+|\\d+.\\d+)\\s(?<quantifier>\\w+)\\s(?<unitprice>\\d+\\,?\\d*\\.\\d{2})\\s(?<totalprice>\\d*\\,?\\d+\\.\\d{2})/gm)\r\n            \r\n            let poitem = Array.from(matchItems).map(item => item.groups).map(item => ({ ...{ponumber:poNumber, podate:poDate},...item }))\r\n\r\n            poitem.forEach(item => {\r\n                item['date'] = moment(item['date'],\"DD.MM.YYYY\").format(\"YYYY/MM/DD\")\r\n            })\r\n            \r\n            resolve({poDate:poDate, poNumber: poNumber, items:poitem?poitem:[], data: btoa(reader.result), filename: file.name})\r\n            //setItems(Array.from(matchItems).map(item => item.groups))\r\n            }\r\n\r\n            reader.readAsBinaryString(file)\r\n        })  \r\n        })\r\n\r\n        Promise.all(promise).then((result)=>{\r\n        setItems(result)\r\n        console.log(result)\r\n        })\r\n        \r\n    }\r\n\r\n    let onDropFile = (evt) => {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n\r\n        let files = evt.dataTransfer.files; \r\n\r\n        handleFileChange(files)\r\n    }\r\n\r\n    const pdfWidth = window.innerWidth * 0.8\r\n    return (\r\n        <>\r\n            <div className=\"dropFileArea\" onDragOver={(evt)=>{evt.stopPropagation();evt.preventDefault();evt.dataTransfer.dropEffect = 'copy';}} onDrop={onDropFile}>\r\n                <div style={{display:'flex', height: '40px', verticalAlign:'middle'}}>\r\n                <div style={{padding:'8px'}}>Drop multiple PO PDF files or</div>\r\n\r\n                <Button onClick={()=>{\r\n                    fileInput.current.click();\r\n                }}>Select Files</Button>\r\n\r\n                <input type=\"file\" ref={fileInput} onChange={(evt)=>{\r\n                    let files = evt.target.files \r\n                    if(files.length > 0){\r\n                    handleFileChange(files)\r\n                    }\r\n                }} style={{display:'none'}} accept=\".pdf\" multiple/>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            <div className=\"actionArea\">\r\n                {items.length > 0 && <Button variant=\"secondary\" onClick={()=>{exportCSV()}}>Export to Excel</Button>}\r\n            </div>\r\n                \r\n            <div className=\"itemsArea\">\r\n                {items.length > 0 && <Table size=\"sm\" hover={true}>\r\n                <thead>\r\n                    <tr>\r\n                    <td>Filename</td>\r\n                    <td>PO Number</td>\r\n                    <td>PO Date</td>\r\n                    <td>Number of items</td>\r\n                    <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items.map((item,itemIndex) => {\r\n                    return <tr key={itemIndex}>\r\n                        <td>{item.filename}</td>\r\n                        <td>{item.poDate}</td>\r\n                        <td>{item.poNumber}</td>\r\n                        <td>{item.items.length}</td>\r\n                        <td>\r\n                        <ButtonGroup size=\"sm\">\r\n                            <Button onClick={()=>{\r\n                            setFileBase64(item.data);\r\n                            setCurrentPage(1)\r\n                            setModalPdf(true);\r\n                            }}>\r\n                            View PDF\r\n                            </Button>\r\n                            <Button onClick={()=>{\r\n                            setViewItem(item.items)\r\n                            setModalItem(true)\r\n                            }}>\r\n                            View Item\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        \r\n                        \r\n                        </td>\r\n                    </tr>\r\n                    })}\r\n                </tbody>\r\n                </Table>}\r\n            </div>\r\n            \r\n            \r\n            {/* Unhide for debug purpose <div>{fileText}</div>*/}\r\n            <Modal centered scrollable show={modalPdf} onHide={()=>{setModalPdf(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>PDF Document</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                {fileBase64 !== null && <PDFReader data={atob(fileBase64)} size={0.7} onDocumentComplete={\r\n                    (page)=>{\r\n                    setPage(page)\r\n                    }\r\n                } page={currentPage} width={pdfWidth}/>}\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                <div>Page {currentPage} of {page}</div>\r\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage-1 >= 0) setCurrentPage(currentPage-1)}} disabled={currentPage == 1}>Previous</Button>\r\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage+1 <= page) setCurrentPage(currentPage+1)}} disabled={currentPage == page}>Next</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal centered scrollable show={modalItem} onHide={()=>{setModalItem(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Items</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                {viewItem.length > 0 && <table className=\"po-output\">\r\n                    <thead>\r\n                    <tr>\r\n                        {Object.keys(viewItem[0]).map((field, fieldid)=>{\r\n                        return <td key={fieldid}>{`${field}\\t`}</td>\r\n                        })}\r\n                    </tr>\r\n                    </thead>  \r\n                    <tbody>\r\n                    {viewItem.map((item, itemid)=>{\r\n                        return <tr key={`item_${itemid}`}>\r\n                        {Object.keys(item).map((field, fieldid)=>{\r\n                            return <td key={`item_${itemid}_${fieldid}`}>{`${item[field]}\\t`}</td>\r\n                        })}\r\n                        </tr>\r\n                    })}\r\n                    <tr></tr>\r\n                    </tbody>\r\n                </table>}\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\nexport default PO","import React from 'react'\r\n\r\nimport { PDFReader } from 'reactjs-pdf-reader';\r\n\r\n// Bootstrap\r\nimport { Button , Modal, Table, ButtonGroup} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// moment.js\r\nimport * as moment from 'moment';\r\n\r\n// Exceljs\r\nimport Excel from 'exceljs';\r\n\r\nfunction DO(){\r\n\r\n    let [ fileBase64 , setFileBase64 ] = React.useState(null)\r\n    let [ viewItem , setViewItem ] = React.useState([])\r\n    let [ modalItem , setModalItem ] = React.useState(false)\r\n    let [ page, setPage ] = React.useState(1)\r\n    let [ currentPage, setCurrentPage ] = React.useState(1)\r\n    let [ modalPdf , setModalPdf ] = React.useState(false)\r\n    let [ items , setItems ] = React.useState([])\r\n    let fileInput = React.createRef()\r\n\r\n    let exportCSV = () => {\r\n        let content = []\r\n        let totalItems = items.flatMap(item => item.items)\r\n        content = totalItems.map(lineItem => Object.values(lineItem))\r\n\r\n        if(content.length > 0){\r\n        let wb = new Excel.Workbook()\r\n        let ws = wb.addWorksheet(\"PO\")\r\n        ws.addRow(Object.keys(totalItems[0]))\r\n\r\n        ws.addRows(content)\r\n        //content = [Object.keys(totalItems[0]).join(\",\"), ...content]\r\n        wb.xlsx.writeBuffer().then((buffer) => {\r\n            let blob = new Blob([buffer],{type:\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"})\r\n            let elem = window.document.createElement(\"a\")\r\n            elem.href = window.URL.createObjectURL(blob)\r\n            elem.download = 'DO_Export.xlsx'\r\n            elem.click()\r\n        })\r\n        }\r\n    }\r\n\r\n    let handleFileChange = async (files) => {\r\n        let promise = Array.from(files).map((file)=>{\r\n            return new Promise((resolve)=>{\r\n                let reader = new FileReader()\r\n                reader.onload = async (_) => {\r\n                //setFileBase64(btoa(reader.result))\r\n\r\n                    var loadingTask = window.pdfjsLib.getDocument({ data:  reader.result});\r\n                    var pdfText = await loadingTask.promise.then(async (pdfDocument) => {\r\n                        const numberOfPage = pdfDocument.numPages\r\n                        let final = \"\"\r\n                        for(let i = 1; i <= numberOfPage ; i++){\r\n                            let pageString = await pdfDocument.getPage(i).then(async (page) => {\r\n                                return page.getTextContent().then(async (textContent) => {\r\n                                    var textItems = textContent.items;\r\n                                    var finalString = \"\";\r\n    \r\n                                    // Concatenate the string of the item to the final string\r\n                                    for (var i = 0; i < textItems.length; i++) {\r\n                                        var item = textItems[i];\r\n    \r\n                                        finalString += item.str + \" \";\r\n                                    }\r\n    \r\n                                    // Solve promise with the text retrieven from the page\r\n                                    return finalString\r\n                                });\r\n                            });\r\n                            \r\n                            final += \" \" + pageString\r\n                        }\r\n                        return final\r\n                    });\r\n\r\n                    console.log(pdfText)\r\n\r\n                    let poNumber = \"\" , doDate = \"\" , doNumber = \"\"\r\n\r\n                    if(pdfText.match(/PO\\s+No\\.\\s+:\\s*(?<ponumber>\\d+)/i)){\r\n                        poNumber = pdfText.match(/PO\\s+No\\.\\s+:\\s*(?<ponumber>\\d+)/i).groups.ponumber\r\n                    }\r\n        \r\n                    if(pdfText.match(/No\\.?\\s+:\\s+(?<donumber>\\w{15})\\s+Date\\s+:\\s*(?<dodate>\\d{1,2}\\-\\w{3}\\-\\d{4})/i)){\r\n                        doDate = moment(pdfText.match(/No\\.?\\s+:\\s+(?<donumber>\\w{15})\\s+Date\\s+:\\s*(?<dodate>\\d{1,2}\\-\\w{3}\\-\\d{4})/i).groups.dodate, \"DD-MMM-YYYY\").format(\"YYYY/MM/DD\")\r\n                        doNumber = pdfText.match(/No\\.?\\s+:\\s+(?<donumber>\\w{15})\\s+Date\\s+:\\s*(?<dodate>\\d{1,2}\\-\\w{3}\\-\\d{4})/i).groups.donumber\r\n                    }\r\n        \r\n                    let matchItems = pdfText.matchAll(/(?<noitem>\\d{1,2})\\s+(?<quantity>\\d+|\\d+.\\d+)\\s+(?<materialno>\\d{10})\\s+(?<sitecode>\\w{6})\\s+(?<UOM>\\w+)\\s+(?<description>.+?((?=(\\s+(\\d{1,2})\\s+(\\d+|\\d+.\\d+)))|(?=\\s+OCK Setia)|(?=\\s+RECEIVED)))/gmi)\r\n            \r\n                    let poitem = Array.from(matchItems).map(item => item.groups).map(item => ({ ...{ponumber:poNumber, dodate:doDate, donumber:doNumber},...item }))\r\n\r\n                    /*poitem.forEach(item => {\r\n                        item['date'] = moment(item['date'],\"DD.MM.YYYY\").format(\"YYYY/MM/DD\")\r\n                    })*/\r\n                    \r\n                    //console.log({doDate:doDate, doNumber:doNumber, poNumber: poNumber, items:poitem?poitem:[], data: btoa(reader.result), filename: file.name})\r\n                    resolve({doDate:doDate, doNumber:doNumber, poNumber: poNumber, items:poitem?poitem:[], data: btoa(reader.result), filename: file.name})\r\n                }\r\n                \r\n\r\n                reader.readAsBinaryString(file)\r\n            })  \r\n        })\r\n\r\n        Promise.all(promise).then((result)=>{\r\n            setItems(result)\r\n            console.log(result)\r\n        })\r\n    }\r\n\r\n    let onDropFile = (evt) => {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n\r\n        let files = evt.dataTransfer.files; \r\n\r\n        handleFileChange(files)\r\n    }\r\n\r\n    const pdfWidth = window.innerWidth * 0.8\r\n    return (\r\n        <>\r\n            <div className=\"dropFileArea\" onDragOver={(evt)=>{evt.stopPropagation();evt.preventDefault();evt.dataTransfer.dropEffect = 'copy';}} onDrop={onDropFile}>\r\n                <div style={{display:'flex', height: '40px', verticalAlign:'middle'}}>\r\n                <div style={{padding:'8px'}}>Drop multiple DO PDF files or</div>\r\n\r\n                <Button onClick={()=>{\r\n                    fileInput.current.click();\r\n                }}>Select Files</Button>\r\n\r\n                <input type=\"file\" ref={fileInput} onChange={(evt)=>{\r\n                    let files = evt.target.files \r\n                    if(files.length > 0){\r\n                    handleFileChange(files)\r\n                    }\r\n                }} style={{display:'none'}} accept=\".pdf\" multiple/>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            <div className=\"actionArea\">\r\n                {items.length > 0 && <Button variant=\"secondary\" onClick={()=>{exportCSV()}}>Export to Excel</Button>}\r\n            </div>\r\n                \r\n            <div className=\"itemsArea\">\r\n                {items.length > 0 && <Table size=\"sm\" hover={true}>\r\n                <thead>\r\n                    <tr>\r\n                    <td>Filename</td>\r\n                    <td>DO Number</td>\r\n                    <td>DO Date</td>\r\n                    <td>PO Number</td>\r\n                    <td>Number of items</td>\r\n                    <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items.map((item,itemIndex) => {\r\n                    return <tr key={itemIndex}>\r\n                        <td>{item.filename}</td>\r\n                        <td>{item.doNumber}</td>\r\n                        <td>{item.doDate}</td>\r\n                        <td>{item.poNumber}</td>\r\n                        <td>{item.items.length}</td>\r\n                        <td>\r\n                        <ButtonGroup size=\"sm\">\r\n                            <Button onClick={()=>{\r\n                            setFileBase64(item.data);\r\n                            setCurrentPage(1)\r\n                            setModalPdf(true);\r\n                            }}>\r\n                            View PDF\r\n                            </Button>\r\n                            <Button onClick={()=>{\r\n                            setViewItem(item.items)\r\n                            setModalItem(true)\r\n                            }}>\r\n                            View Item\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        \r\n                        \r\n                        </td>\r\n                    </tr>\r\n                    })}\r\n                </tbody>\r\n                </Table>}\r\n            </div>\r\n            \r\n            \r\n            {/* Unhide for debug purpose <div>{fileText}</div>*/}\r\n            <Modal centered scrollable show={modalPdf} onHide={()=>{setModalPdf(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>PDF Document</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                {fileBase64 !== null && <PDFReader data={atob(fileBase64)} size={0.7} onDocumentComplete={\r\n                    (page)=>{\r\n                    setPage(page)\r\n                    }\r\n                } page={currentPage} width={pdfWidth}/>}\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                <div>Page {currentPage} of {page}</div>\r\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage-1 >= 0) setCurrentPage(currentPage-1)}} disabled={currentPage == 1}>Previous</Button>\r\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage+1 <= page) setCurrentPage(currentPage+1)}} disabled={currentPage == page}>Next</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal centered scrollable show={modalItem} onHide={()=>{setModalItem(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Items</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                {viewItem.length > 0 && <table className=\"po-output\">\r\n                    <thead>\r\n                    <tr>\r\n                        {Object.keys(viewItem[0]).map((field, fieldid)=>{\r\n                        return <td key={fieldid}>{`${field}\\t`}</td>\r\n                        })}\r\n                    </tr>\r\n                    </thead>  \r\n                    <tbody>\r\n                    {viewItem.map((item, itemid)=>{\r\n                        return <tr key={`item_${itemid}`}>\r\n                        {Object.keys(item).map((field, fieldid)=>{\r\n                            return <td key={`item_${itemid}_${fieldid}`}>{`${item[field]}\\t`}</td>\r\n                        })}\r\n                        </tr>\r\n                    })}\r\n                    <tr></tr>\r\n                    </tbody>\r\n                </table>}\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\nexport default DO","import React from 'react';\nimport './App.css';\nimport PO from './PO';\nimport DO from './DO';\n\n// Bootstrap\nimport { Navbar , Nav} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// React Router\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  NavLink\n} from \"react-router-dom\"\n\nfunction App(props) {\n\n  return (\n    <Router basename=\"poer\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>PDF Extract</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link as={NavLink} to=\"po\" activeStyle={{color:'white'}}>Purchase Order</Nav.Link>\n          <Nav.Link as={NavLink} to=\"do\" activeStyle={{color:'white'}}>Delivery Order</Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/po\">\n            <PO />\n          </Route>\n          <Route path=\"/do\">\n            <DO />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to={{pathname:\"po\"}} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  console.log(process.env.NODE_ENV)\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}