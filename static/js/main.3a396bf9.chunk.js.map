{"version":3,"sources":["PO.js","DO.js","App.js","serviceWorker.js","index.js"],"names":["PO","React","useState","fileBase64","setFileBase64","viewItem","setViewItem","modalItem","setModalItem","page","setPage","currentPage","setCurrentPage","modalPdf","setModalPdf","items","setItems","vendor","setVendor","vendorConfig","webe","poNumber","poDate","ericssondigi","fileInput","createRef","exportCSV","content","totalItems","flatMap","item","map","lineItem","Object","values","length","wb","Excel","Workbook","ws","addWorksheet","addRow","keys","console","log","forEach","column","index","match","getColumn","num","ret","a","b","String","fromCharCode","parseInt","toColumnName","numFmt","row","moment","toDate","addRows","xlsx","writeBuffer","then","buffer","blob","Blob","type","elem","window","document","createElement","href","URL","createObjectURL","download","click","handleFileChange","files","async","promise","Array","from","file","Promise","resolve","reader","FileReader","onload","_","pdfText","pdf2text","btoa","result","groups","ponumber","podate","format","matchItems","matchAll","poitem","data","filename","name","readAsBinaryString","all","pdfWidth","innerWidth","Form","style","marginBottom","Select","label","options","key","value","text","onChange","e","className","onDragOver","evt","stopPropagation","preventDefault","dataTransfer","dropEffect","onDrop","display","height","verticalAlign","padding","Button","onClick","current","ref","target","accept","multiple","variant","Table","size","hover","itemIndex","ButtonGroup","Modal","centered","scrollable","show","onHide","dialogClassName","Header","closeButton","Title","Body","atob","onDocumentComplete","width","Footer","disabled","field","fieldid","itemid","DO","loadingTask","pdfjsLib","getDocument","pdfDocument","numberOfPage","numPages","final","i","getPage","getTextContent","textContent","textItems","finalString","str","pageString","doDate","doNumber","dodate","donumber","App","props","basename","Navbar","bg","Brand","Nav","Link","as","NavLink","to","activeStyle","color","path","pathname","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a396bf9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { PDFReader } from 'reactjs-pdf-reader';\r\n\r\n// Bootstrap\r\nimport { Button , Modal, Table, ButtonGroup} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// Semantic\r\nimport { Form } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\n// moment.js\r\nimport * as moment from 'moment';\r\n\r\n// Exceljs\r\nimport Excel from 'exceljs';\r\n\r\nfunction PO(){\r\n\r\n    let [ fileBase64 , setFileBase64 ] = React.useState(null)\r\n    let [ viewItem , setViewItem ] = React.useState([])\r\n    let [ modalItem , setModalItem ] = React.useState(false)\r\n    let [ page, setPage ] = React.useState(1)\r\n    let [ currentPage, setCurrentPage ] = React.useState(1)\r\n    let [ modalPdf , setModalPdf ] = React.useState(false)\r\n    let [ items , setItems ] = React.useState([])\r\n    let [ vendor , setVendor ] = React.useState(\"webe\")\r\n\r\n    const vendorConfig = {\r\n        webe:{\r\n            poNumber : /PO\\s+Number\\s+:\\s*(?<ponumber>\\d+)/, \r\n            poDate: /PO\\s+Date\\s+:\\s*(?<podate>[\\d]+[\\.|\\-|\\\\][\\d]+[\\.|\\-|\\\\][\\d]+)/, \r\n            items: /(?<item>\\d{1,2})\\s(?<materialno>\\d{10})\\s(?<description>.+?)\\s(?<date>\\d{1,2}\\.\\d{1,2}\\.\\d{4})\\s(?<quantity>\\d+|\\d+.\\d+)\\s(?<quantifier>\\w+)\\s(?<unitprice>\\d+\\,?\\d*\\.\\d{2})\\s(?<totalprice>\\d*\\,?\\d+\\.\\d{2})/gm\r\n        },\r\n        ericssondigi:{\r\n            poNumber: /Purchase Order\\s*(?<ponumber>\\d{10})/,\r\n            poDate: /Date\\s*(?<podate>\\d{2}\\.\\d{2}\\.\\d{4})\\s*\\(DD\\.MM\\.YYYY\\)/,\r\n            items: /\\s(?<itemno>\\d{5})\\s+(?<description>.{1,50})\\s+(?<quantity>\\d+\\.{0,1}\\d{0,})\\s+(?<unit>\\w+)\\s+(?<unitprice>\\d+(\\,\\d{3}){0,}\\.\\d{2})\\s+(?<linevalue>\\d+(\\,\\d{3}){0,}\\.\\d{2})\\s+(?<siteid>\\d{4}\\w(\\_\\d){0,1})/gm\r\n        }\r\n    }\r\n    let fileInput = React.createRef()\r\n\r\n    let toColumnName = (num) => {\r\n        for (var ret = '', a = 1, b = 26; (num -= a) >= 0; a = b, b *= 26) {\r\n        ret = String.fromCharCode(parseInt((num % b) / a) + 65) + ret;\r\n        }\r\n        return ret;    \r\n    }\r\n\r\n    let exportCSV = () => {\r\n        let content = []\r\n        let totalItems = items.flatMap(item => item.items)\r\n        content = totalItems.map(lineItem => Object.values(lineItem))\r\n\r\n        if(content.length > 0){\r\n        let wb = new Excel.Workbook()\r\n        let ws = wb.addWorksheet(\"PO\")\r\n        ws.addRow(Object.keys(totalItems[0]))\r\n        console.log(Object.keys(totalItems[0]))\r\n        console.log(content)\r\n\r\n        Object.keys(totalItems[0]).forEach((column,index) => {\r\n            if(column.match(/date/g)){\r\n                console.log(`Convert column ${index+1} to date format`)\r\n                ws.getColumn(`${toColumnName(index+1)}`).numFmt = \"d-mmm-yy\"\r\n                content.forEach(row => {\r\n                    row[index] = moment.utc(row[index], 'YYYY/MM/DD').toDate()\r\n                })\r\n            }\r\n        })\r\n        ws.addRows(content)\r\n\r\n        \r\n        //content = [Object.keys(totalItems[0]).join(\",\"), ...content]\r\n        wb.xlsx.writeBuffer().then((buffer) => {\r\n            let blob = new Blob([buffer],{type:\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"})\r\n            let elem = window.document.createElement(\"a\")\r\n            elem.href = window.URL.createObjectURL(blob)\r\n            elem.download = 'PO_Export.xlsx'\r\n            elem.click()\r\n        })\r\n        }\r\n    }\r\n\r\n    let handleFileChange = async (files) => {\r\n        let promise = Array.from(files).map((file)=>{\r\n            return new Promise((resolve)=>{\r\n                let reader = new FileReader()\r\n                reader.onload = (_) => {\r\n                //setFileBase64(btoa(reader.result))\r\n                let pdfText = window.pdf2text(btoa(reader.result))\r\n                console.log(pdfText)\r\n                let [poNumber , poDate] = [\"\" , \"\"]\r\n\r\n                \r\n                if(pdfText.match(vendorConfig[vendor].poNumber)){    \r\n                    poNumber = pdfText.match(vendorConfig[vendor].poNumber).groups.ponumber\r\n                    console.log(poNumber)\r\n                }\r\n\r\n                if(pdfText.match(vendorConfig[vendor].poDate)){\r\n                    poDate = moment(pdfText.match(vendorConfig[vendor].poDate).groups.podate, \"DD.MM.YYYY\").format(\"YYYY/MM/DD\")\r\n                }\r\n\r\n                //setFileText(pdfText)\r\n                let matchItems = pdfText.matchAll(vendorConfig[vendor].items)\r\n                \r\n                let poitem = Array.from(matchItems).map(item => item.groups).map(item => ({ ...{ponumber:poNumber, podate:poDate},...item }))\r\n\r\n                poitem.forEach(item => {\r\n                    if('date' in item){\r\n                        item['date'] = moment(item['date'],\"DD.MM.YYYY\").format(\"YYYY/MM/DD\")\r\n                    }\r\n                })\r\n                \r\n                resolve({poDate:poDate, poNumber: poNumber, items:poitem?poitem:[], data: btoa(reader.result), filename: file.name})\r\n                //setItems(Array.from(matchItems).map(item => item.groups))\r\n                }\r\n\r\n                reader.readAsBinaryString(file)\r\n            })  \r\n        })\r\n\r\n        Promise.all(promise).then((result)=>{\r\n        setItems(result)\r\n        console.log(result)\r\n        })\r\n        \r\n    }\r\n\r\n    let onDropFile = (evt) => {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n\r\n        let files = evt.dataTransfer.files; \r\n\r\n        handleFileChange(files)\r\n    }\r\n\r\n    const pdfWidth = window.innerWidth * 0.8\r\n    return (\r\n        <>  \r\n            <Form style={{marginBottom:'10px'}}>\r\n                <Form.Select label=\"Select PO type\" options={[\r\n                    {key: 'webe', value: 'webe', text: 'Webe PO'},\r\n                    {key: 'ericssondigi', value:'ericssondigi', text: 'Ericssion Digi PO'}\r\n                ]} value={vendor} onChange={(e,{value})=>setVendor(value)}/>\r\n            </Form>\r\n            <div className=\"dropFileArea\" onDragOver={(evt)=>{evt.stopPropagation();evt.preventDefault();evt.dataTransfer.dropEffect = 'copy';}} onDrop={onDropFile}>\r\n                <div style={{display:'flex', height: '40px', verticalAlign:'middle'}}>\r\n                <div style={{padding:'8px'}}>Drop multiple PO PDF files or</div>\r\n\r\n                <Button onClick={()=>{\r\n                    fileInput.current.click();\r\n                }}>Select Files</Button>\r\n\r\n                <input type=\"file\" ref={fileInput} onChange={(evt)=>{\r\n                    let files = evt.target.files \r\n                    if(files.length > 0){\r\n                    handleFileChange(files)\r\n                    }\r\n                }} style={{display:'none'}} accept=\".pdf\" multiple/>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            <div className=\"actionArea\">\r\n                {items.length > 0 && <Button variant=\"secondary\" onClick={()=>{exportCSV()}}>Export to Excel</Button>}\r\n            </div>\r\n                \r\n            <div className=\"itemsArea\">\r\n                {items.length > 0 && <Table size=\"sm\" hover={true}>\r\n                <thead>\r\n                    <tr>\r\n                    <td>Filename</td>\r\n                    <td>PO Number</td>\r\n                    <td>PO Date</td>\r\n                    <td>Number of items</td>\r\n                    <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items.map((item,itemIndex) => {\r\n                    return <tr key={itemIndex}>\r\n                        <td>{item.filename}</td>\r\n                        <td>{item.poNumber}</td>\r\n                        <td>{item.poDate}</td>\r\n                        <td>{item.items.length}</td>\r\n                        <td>\r\n                        <ButtonGroup size=\"sm\">\r\n                            <Button onClick={()=>{\r\n                            setFileBase64(item.data);\r\n                            setCurrentPage(1)\r\n                            setModalPdf(true);\r\n                            }}>\r\n                            View PDF\r\n                            </Button>\r\n                            <Button onClick={()=>{\r\n                            setViewItem(item.items)\r\n                            setModalItem(true)\r\n                            }}>\r\n                            View Item\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        \r\n                        \r\n                        </td>\r\n                    </tr>\r\n                    })}\r\n                </tbody>\r\n                </Table>}\r\n            </div>\r\n            \r\n            \r\n            {/* Unhide for debug purpose <div>{fileText}</div>*/}\r\n            <Modal centered scrollable show={modalPdf} onHide={()=>{setModalPdf(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>PDF Document</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                {fileBase64 !== null && <PDFReader data={atob(fileBase64)} size={0.7} onDocumentComplete={\r\n                    (page)=>{\r\n                    setPage(page)\r\n                    }\r\n                } page={currentPage} width={pdfWidth}/>}\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                <div>Page {currentPage} of {page}</div>\r\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage-1 >= 0) setCurrentPage(currentPage-1)}} disabled={currentPage == 1}>Previous</Button>\r\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage+1 <= page) setCurrentPage(currentPage+1)}} disabled={currentPage == page}>Next</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal centered scrollable show={modalItem} onHide={()=>{setModalItem(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Items</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                {viewItem.length > 0 && <table className=\"po-output\">\r\n                    <thead>\r\n                    <tr>\r\n                        {Object.keys(viewItem[0]).map((field, fieldid)=>{\r\n                        return <td key={fieldid}>{`${field}\\t`}</td>\r\n                        })}\r\n                    </tr>\r\n                    </thead>  \r\n                    <tbody>\r\n                    {viewItem.map((item, itemid)=>{\r\n                        return <tr key={`item_${itemid}`}>\r\n                        {Object.keys(item).map((field, fieldid)=>{\r\n                            return <td key={`item_${itemid}_${fieldid}`}>{`${item[field]}\\t`}</td>\r\n                        })}\r\n                        </tr>\r\n                    })}\r\n                    <tr></tr>\r\n                    </tbody>\r\n                </table>}\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\nexport default PO","import React from 'react'\r\n\r\nimport { PDFReader } from 'reactjs-pdf-reader';\r\n\r\n// Bootstrap\r\nimport { Button , Modal, Table, ButtonGroup} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// moment.js\r\nimport * as moment from 'moment';\r\n\r\n// Exceljs\r\nimport Excel from 'exceljs';\r\n\r\nfunction DO(){\r\n\r\n    let [ fileBase64 , setFileBase64 ] = React.useState(null)\r\n    let [ viewItem , setViewItem ] = React.useState([])\r\n    let [ modalItem , setModalItem ] = React.useState(false)\r\n    let [ page, setPage ] = React.useState(1)\r\n    let [ currentPage, setCurrentPage ] = React.useState(1)\r\n    let [ modalPdf , setModalPdf ] = React.useState(false)\r\n    let [ items , setItems ] = React.useState([])\r\n    let fileInput = React.createRef()\r\n\r\n    let exportCSV = () => {\r\n        let content = []\r\n        let totalItems = items.flatMap(item => item.items)\r\n        content = totalItems.map(lineItem => Object.values(lineItem))\r\n\r\n        if(content.length > 0){\r\n        let wb = new Excel.Workbook()\r\n        let ws = wb.addWorksheet(\"PO\")\r\n        ws.addRow(Object.keys(totalItems[0]))\r\n\r\n        ws.addRows(content)\r\n        //content = [Object.keys(totalItems[0]).join(\",\"), ...content]\r\n        wb.xlsx.writeBuffer().then((buffer) => {\r\n            let blob = new Blob([buffer],{type:\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"})\r\n            let elem = window.document.createElement(\"a\")\r\n            elem.href = window.URL.createObjectURL(blob)\r\n            elem.download = 'DO_Export.xlsx'\r\n            elem.click()\r\n        })\r\n        }\r\n    }\r\n\r\n    let handleFileChange = async (files) => {\r\n        let promise = Array.from(files).map((file)=>{\r\n            return new Promise((resolve)=>{\r\n                let reader = new FileReader()\r\n                reader.onload = async (_) => {\r\n                //setFileBase64(btoa(reader.result))\r\n\r\n                    var loadingTask = window.pdfjsLib.getDocument({ data:  reader.result});\r\n                    var pdfText = await loadingTask.promise.then(async (pdfDocument) => {\r\n                        const numberOfPage = pdfDocument.numPages\r\n                        let final = \"\"\r\n                        for(let i = 1; i <= numberOfPage ; i++){\r\n                            let pageString = await pdfDocument.getPage(i).then(async (page) => {\r\n                                return page.getTextContent().then(async (textContent) => {\r\n                                    var textItems = textContent.items;\r\n                                    var finalString = \"\";\r\n    \r\n                                    // Concatenate the string of the item to the final string\r\n                                    for (var i = 0; i < textItems.length; i++) {\r\n                                        var item = textItems[i];\r\n    \r\n                                        finalString += item.str + \" \";\r\n                                    }\r\n    \r\n                                    // Solve promise with the text retrieven from the page\r\n                                    return finalString\r\n                                });\r\n                            });\r\n                            \r\n                            final += \" \" + pageString\r\n                        }\r\n                        return final\r\n                    });\r\n\r\n                    console.log(pdfText)\r\n\r\n                    let poNumber = \"\" , doDate = \"\" , doNumber = \"\"\r\n\r\n                    if(pdfText.match(/PO\\s+No\\.\\s+:\\s*(?<ponumber>\\d+)/i)){\r\n                        poNumber = pdfText.match(/PO\\s+No\\.\\s+:\\s*(?<ponumber>\\d+)/i).groups.ponumber\r\n                    }\r\n        \r\n                    if(pdfText.match(/No\\.?\\s+:\\s+(?<donumber>\\w{15})\\s+Date\\s+:\\s*(?<dodate>\\d{1,2}\\-\\w{3}\\-\\d{4})/i)){\r\n                        doDate = moment(pdfText.match(/No\\.?\\s+:\\s+(?<donumber>\\w{15})\\s+Date\\s+:\\s*(?<dodate>\\d{1,2}\\-\\w{3}\\-\\d{4})/i).groups.dodate, \"DD-MMM-YYYY\").format(\"YYYY/MM/DD\")\r\n                        doNumber = pdfText.match(/No\\.?\\s+:\\s+(?<donumber>\\w{15})\\s+Date\\s+:\\s*(?<dodate>\\d{1,2}\\-\\w{3}\\-\\d{4})/i).groups.donumber\r\n                    }\r\n        \r\n                    let matchItems = pdfText.matchAll(/(?<noitem>\\d{1,2})\\s+(?<quantity>\\d+|\\d+.\\d+)\\s+(?<materialno>\\d{10})\\s+(?<sitecode>\\w{6})\\s+(?<UOM>\\w+)\\s+(?<description>.+?((?=(\\s+(\\d{1,2})\\s+(\\d+|\\d+.\\d+)))|(?=\\s+OCK Setia)|(?=\\s+RECEIVED)))/gmi)\r\n            \r\n                    let poitem = Array.from(matchItems).map(item => item.groups).map(item => ({ ...{ponumber:poNumber, dodate:doDate, donumber:doNumber},...item }))\r\n\r\n                    /*poitem.forEach(item => {\r\n                        item['date'] = moment(item['date'],\"DD.MM.YYYY\").format(\"YYYY/MM/DD\")\r\n                    })*/\r\n                    \r\n                    //console.log({doDate:doDate, doNumber:doNumber, poNumber: poNumber, items:poitem?poitem:[], data: btoa(reader.result), filename: file.name})\r\n                    resolve({doDate:doDate, doNumber:doNumber, poNumber: poNumber, items:poitem?poitem:[], data: btoa(reader.result), filename: file.name})\r\n                }\r\n                \r\n\r\n                reader.readAsBinaryString(file)\r\n            })  \r\n        })\r\n\r\n        Promise.all(promise).then((result)=>{\r\n            setItems(result)\r\n            console.log(result)\r\n        })\r\n    }\r\n\r\n    let onDropFile = (evt) => {\r\n        evt.stopPropagation();\r\n        evt.preventDefault();\r\n\r\n        let files = evt.dataTransfer.files; \r\n\r\n        handleFileChange(files)\r\n    }\r\n\r\n    const pdfWidth = window.innerWidth * 0.8\r\n    return (\r\n        <>\r\n            <div className=\"dropFileArea\" onDragOver={(evt)=>{evt.stopPropagation();evt.preventDefault();evt.dataTransfer.dropEffect = 'copy';}} onDrop={onDropFile}>\r\n                <div style={{display:'flex', height: '40px', verticalAlign:'middle'}}>\r\n                <div style={{padding:'8px'}}>Drop multiple DO PDF files or</div>\r\n\r\n                <Button onClick={()=>{\r\n                    fileInput.current.click();\r\n                }}>Select Files</Button>\r\n\r\n                <input type=\"file\" ref={fileInput} onChange={(evt)=>{\r\n                    let files = evt.target.files \r\n                    if(files.length > 0){\r\n                    handleFileChange(files)\r\n                    }\r\n                }} style={{display:'none'}} accept=\".pdf\" multiple/>\r\n                </div>\r\n                \r\n            </div>\r\n\r\n            <div className=\"actionArea\">\r\n                {items.length > 0 && <Button variant=\"secondary\" onClick={()=>{exportCSV()}}>Export to Excel</Button>}\r\n            </div>\r\n                \r\n            <div className=\"itemsArea\">\r\n                {items.length > 0 && <Table size=\"sm\" hover={true}>\r\n                <thead>\r\n                    <tr>\r\n                    <td>Filename</td>\r\n                    <td>DO Number</td>\r\n                    <td>DO Date</td>\r\n                    <td>PO Number</td>\r\n                    <td>Number of items</td>\r\n                    <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items.map((item,itemIndex) => {\r\n                    return <tr key={itemIndex}>\r\n                        <td>{item.filename}</td>\r\n                        <td>{item.doNumber}</td>\r\n                        <td>{item.doDate}</td>\r\n                        <td>{item.poNumber}</td>\r\n                        <td>{item.items.length}</td>\r\n                        <td>\r\n                        <ButtonGroup size=\"sm\">\r\n                            <Button onClick={()=>{\r\n                            setFileBase64(item.data);\r\n                            setCurrentPage(1)\r\n                            setModalPdf(true);\r\n                            }}>\r\n                            View PDF\r\n                            </Button>\r\n                            <Button onClick={()=>{\r\n                            setViewItem(item.items)\r\n                            setModalItem(true)\r\n                            }}>\r\n                            View Item\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        \r\n                        \r\n                        </td>\r\n                    </tr>\r\n                    })}\r\n                </tbody>\r\n                </Table>}\r\n            </div>\r\n            \r\n            \r\n            {/* Unhide for debug purpose <div>{fileText}</div>*/}\r\n            <Modal centered scrollable show={modalPdf} onHide={()=>{setModalPdf(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>PDF Document</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                {fileBase64 !== null && <PDFReader data={atob(fileBase64)} size={0.7} onDocumentComplete={\r\n                    (page)=>{\r\n                    setPage(page)\r\n                    }\r\n                } page={currentPage} width={pdfWidth}/>}\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                <div>Page {currentPage} of {page}</div>\r\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage-1 >= 0) setCurrentPage(currentPage-1)}} disabled={currentPage == 1}>Previous</Button>\r\n                <Button variant=\"secondary\" onClick={()=>{if(currentPage+1 <= page) setCurrentPage(currentPage+1)}} disabled={currentPage == page}>Next</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal centered scrollable show={modalItem} onHide={()=>{setModalItem(false)}} dialogClassName={'pdf-modal'} size=\"xl\">\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>Items</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                {viewItem.length > 0 && <table className=\"po-output\">\r\n                    <thead>\r\n                    <tr>\r\n                        {Object.keys(viewItem[0]).map((field, fieldid)=>{\r\n                        return <td key={fieldid}>{`${field}\\t`}</td>\r\n                        })}\r\n                    </tr>\r\n                    </thead>  \r\n                    <tbody>\r\n                    {viewItem.map((item, itemid)=>{\r\n                        return <tr key={`item_${itemid}`}>\r\n                        {Object.keys(item).map((field, fieldid)=>{\r\n                            return <td key={`item_${itemid}_${fieldid}`}>{`${item[field]}\\t`}</td>\r\n                        })}\r\n                        </tr>\r\n                    })}\r\n                    <tr></tr>\r\n                    </tbody>\r\n                </table>}\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\nexport default DO","import React from 'react';\nimport './App.css';\nimport PO from './PO';\nimport DO from './DO';\n\n// Bootstrap\nimport { Navbar , Nav} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// React Router\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  NavLink\n} from \"react-router-dom\"\n\nfunction App(props) {\n\n  return (\n    <Router basename=\"poer\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>PDF Extract</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link as={NavLink} to=\"po\" activeStyle={{color:'white'}}>Purchase Order</Nav.Link>\n          <Nav.Link as={NavLink} to=\"do\" activeStyle={{color:'white'}}>Delivery Order</Nav.Link>\n        </Nav>\n      </Navbar>\n\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/po\">\n            <PO />\n          </Route>\n          <Route path=\"/do\">\n            <DO />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to={{pathname:\"po\"}} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  console.log(process.env.NODE_ENV)\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}